const {
  ConsoleConnector,
  Among,
  ArrToObj,
  BaseStemmer,
  containerBootstrap,
  Clonable,
  Container,
  defaultContainer,
  hasUnicode,
  unicodeToArray,
  asciiToArray,
  stringToArray,
  compareWildcars,
  getAbsolutePath,
  listFiles,
  listFilesAbsolute,
  loadEnv,
  Normalizer,
  ObjToArr,
  Stemmer,
  Stopwords,
  Tokenizer,
  Timer,
  MemoryStorage,
  uuid,
  dock,
  Context,
  dockStart,
  Evaluator,
  compile,
  Template,
  JavascriptCompiler,
  LangEn,
  StemmerEn,
  StopwordsEn,
  TokenizerEn,
  NormalizerEn,
  SentimentEn,
  logger,
  Nlp,
} = require('../src');

describe('Basic', () => {
  describe('Expose', () => {
    it('Should expose classes and functions', () => {
      expect(ConsoleConnector).toBeDefined();
      expect(Among).toBeDefined();
      expect(ArrToObj).toBeDefined();
      expect(BaseStemmer).toBeDefined();
      expect(containerBootstrap).toBeDefined();
      expect(Clonable).toBeDefined();
      expect(Container).toBeDefined();
      expect(defaultContainer).toBeDefined();
      expect(hasUnicode).toBeDefined();
      expect(unicodeToArray).toBeDefined();
      expect(asciiToArray).toBeDefined();
      expect(stringToArray).toBeDefined();
      expect(compareWildcars).toBeDefined();
      expect(getAbsolutePath).toBeDefined();
      expect(listFiles).toBeDefined();
      expect(listFilesAbsolute).toBeDefined();
      expect(loadEnv).toBeDefined();
      expect(Normalizer).toBeDefined();
      expect(ObjToArr).toBeDefined();
      expect(Stemmer).toBeDefined();
      expect(Stopwords).toBeDefined();
      expect(Tokenizer).toBeDefined();
      expect(Timer).toBeDefined();
      expect(MemoryStorage).toBeDefined();
      expect(uuid).toBeDefined();
      expect(dock).toBeDefined();
      expect(Context).toBeDefined();
      expect(dockStart).toBeDefined();
      expect(Evaluator).toBeDefined();
      expect(compile).toBeDefined();
      expect(Template).toBeDefined();
      expect(JavascriptCompiler).toBeDefined();
      expect(LangEn).toBeDefined();
      expect(StemmerEn).toBeDefined();
      expect(StopwordsEn).toBeDefined();
      expect(TokenizerEn).toBeDefined();
      expect(NormalizerEn).toBeDefined();
      expect(SentimentEn).toBeDefined();
      expect(logger).toBeDefined();
      expect(Nlp).toBeDefined();
    });
  });
});
